package com.giovannibozzano.crosscolor;

import com.giovannibozzano.crosscolor.math.GaloisField;
import com.giovannibozzano.crosscolor.math.Matrix;
import com.giovannibozzano.crosscolor.math.MatrixOperator;
import com.giovannibozzano.crosscolor.math.Vector;

public final class Main
{
    public static void main(String[] args)
    {
        GaloisField galoisField = new GaloisField(3);
        MatrixOperator matrixOperator = new MatrixOperator(galoisField);

        Matrix matrix = new Matrix(36, 36, new int[][] {
                { 1, 1, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0,    0, 1, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 1, 1, 1, 0, 0,    0, 0, 1, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 0,    0, 0, 0, 1, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 1,    0, 0, 0, 0, 1, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 1,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },

                { 1, 0, 0, 0, 0, 0,    1, 1, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 1, 0, 0, 0, 0,    1, 1, 1, 0, 0, 0,    0, 1, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0,    0, 1, 1, 1, 0, 0,    0, 0, 1, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 1, 0, 0,    0, 0, 1, 1, 1, 0,    0, 0, 0, 1, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 0,    0, 0, 0, 1, 1, 1,    0, 0, 0, 0, 1, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 1, 1,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },

                { 0, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    1, 1, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0,    1, 1, 1, 0, 0, 0,    0, 1, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 1, 0, 0, 0,    0, 1, 1, 1, 0, 0,    0, 0, 1, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0,    0, 0, 1, 1, 1, 0,    0, 0, 0, 1, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0,    0, 0, 0, 1, 1, 1,    0, 0, 0, 0, 1, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 1, 1,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },

                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    1, 1, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0,    1, 1, 1, 0, 0, 0,    0, 1, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 1, 0, 0, 0,    0, 1, 1, 1, 0, 0,    0, 0, 1, 0, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0,    0, 0, 1, 1, 1, 0,    0, 0, 0, 1, 0, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0,    0, 0, 0, 1, 1, 1,    0, 0, 0, 0, 1, 0,    0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 1, 1,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 0, 0 },

                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    1, 1, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0,    1, 1, 1, 0, 0, 0,    0, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 1, 0, 0, 0,    0, 1, 1, 1, 0, 0,    0, 0, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0,    0, 0, 1, 1, 1, 0,    0, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0,    0, 0, 0, 1, 1, 1,    0, 0, 0, 0, 1, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 1, 1,    0, 0, 0, 0, 0, 1 },

                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    1, 0, 0, 0, 0, 0,    1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 1, 0, 0, 0, 0,    1, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 1, 0, 0, 0,    0, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0,    0, 0, 1, 1, 1, 0 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 1, 0,    0, 0, 0, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 1,    0, 0, 0, 0, 1, 1 }
        });

        Vector vector = new Vector(new int[] {
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0,
                2, 0, 0, 1, 1, 1
        });

        Vector solution = matrixOperator.solveLinearEquationsSystem(matrix, vector);
        for (int i = 0; i < solution.getSize(); i++) {
            solution.setElement(i, galoisField.subtract(0, solution.getElement(i)));
        }

        System.out.println("Matrix:");
        for (int i = 0; i < matrix.getRows(); i++) {
            for (int j = 0; j < matrix.getColumns(); j++) {
                if (j > 0) {
                    System.out.print(" ");
                }
                System.out.print(matrix.getElement(i, j));
            }
            System.out.println();
        }
        System.out.println("------------");
        System.out.println("Vector:");
        for (int i = 0; i < vector.getSize(); i++) {
            if (i != 0 && i % 6 == 0) {
                System.out.println();
            } else if (i > 0) {
                System.out.print(" ");
            }
            System.out.print(vector.getElement(i));
        }
        System.out.println();
        System.out.println("------------");
        System.out.println("Solution:");
        for (int i = 0; i < solution.getSize(); i++) {
            if (i != 0 && i % 6 == 0) {
                System.out.println();
            } else if (i > 0) {
                System.out.print(" ");
            }
            System.out.print(solution.getElement(i));
        }
        System.out.println();
    }
}
